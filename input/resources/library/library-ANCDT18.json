{
  "resourceType": "Library",
  "id": "ANCDT18",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/who/anc-cds/Library/ANCDT18",
  "identifier": [ {
    "use": "official",
    "value": "ANC.DT.18"
  } ],
  "name": "ANCDT18",
  "title": "ANC.DT.18 HIV diagnosis",
  "status": "active",
  "experimental": false,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "description": "If the woman tests positive for HIV, provide counselling and referral as needed",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/who/anc-cds/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library Config",
    "resource": "http://fhir.org/guides/who/anc-cds/Library/ANCConfig"
  }, {
    "type": "depends-on",
    "display": "Library Cx",
    "resource": "http://fhir.org/guides/who/anc-cds/Library/ANCConcepts"
  }, {
    "type": "depends-on",
    "display": "Library PatientData",
    "resource": "http://fhir.org/guides/who/anc-cds/Library/ANCDataElements"
  }, {
    "type": "depends-on",
    "display": "Library ContactData",
    "resource": "http://fhir.org/guides/who/anc-cds/Library/ANCContactDataElements"
  }, {
    "type": "depends-on",
    "display": "Library WC",
    "resource": "http://fhir.org/guides/who/anc-cds/Library/WHOCommon"
  }, {
    "type": "depends-on",
    "display": "Value set HIV test result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/anc-b9-de41"
  }, {
    "type": "depends-on",
    "display": "Value set HIV Test Result - Inconclusive Choices",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/anc-b9-de44"
  }, {
    "type": "depends-on",
    "display": "Value set HIV Test Result - Positive Choices",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/anc-b9-de42"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "Should Refer for further testing",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Should Conduct HIV positive counselling",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "mustSupport": [ "code", "encounter.reference", "encounter", "status" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/anc-b9-de41"
    } ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBBTkNEVDE4DQoNCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnDQoNCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjEnDQoNCmluY2x1ZGUgQU5DQ29uZmlnIGNhbGxlZCBDb25maWcNCmluY2x1ZGUgQU5DQ29uY2VwdHMgY2FsbGVkIEN4DQppbmNsdWRlIEFOQ0RhdGFFbGVtZW50cyBjYWxsZWQgUGF0aWVudERhdGENCmluY2x1ZGUgQU5DQ29udGFjdERhdGFFbGVtZW50cyBjYWxsZWQgQ29udGFjdERhdGENCg0KY29udGV4dCBQYXRpZW50DQoNCi8qDQoiSElWIHRlc3QgcmVzdWx0IiA9ICJJbmNvbmNsdXNpdmUiDQoqLw0KZGVmaW5lICJTaG91bGQgUmVmZXIgZm9yIGZ1cnRoZXIgdGVzdGluZyI6DQogIENvbnRhY3REYXRhLiJISVYgdGVzdCByZXN1bHQiIGluIEN4LiJISVYgVGVzdCBSZXN1bHQgLSBJbmNvbmNsdXNpdmUgQ2hvaWNlcyINCg0KLyoNCiJISVYgdGVzdCByZXN1bHQiID0gIkhJViBwb3NpdGl2ZSINCiovDQpkZWZpbmUgIlNob3VsZCBDb25kdWN0IEhJViBwb3NpdGl2ZSBjb3Vuc2VsbGluZyI6DQogIENvbnRhY3REYXRhLiJISVYgdGVzdCByZXN1bHQiIGluIEN4LiJISVYgVGVzdCBSZXN1bHQgLSBQb3NpdGl2ZSBDaG9pY2VzIg0K"
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}