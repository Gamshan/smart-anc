{
  "resourceType": "Library",
  "id": "ANCDataElements",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/who/anc-cds/Library/ANCDataElements",
  "name": "ANCDataElements",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://hl7.org/fhir/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library Cx",
    "resource": "http://fhir.org/guides/who/anc-cds/Library/ANCConcepts"
  }, {
    "type": "depends-on",
    "display": "Value set ANC contact number",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/anc-contact-number"
  }, {
    "type": "depends-on",
    "display": "Value set Co-habitants",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/co-habitants"
  }, {
    "type": "depends-on",
    "display": "Value set Pregnancy confirmed",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/pregnancy-confirmed"
  }, {
    "type": "depends-on",
    "display": "Value set Reason for coming to facility",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-for-coming-to-facility"
  }, {
    "type": "depends-on",
    "display": "Value set Specific health concern(s)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/specific-health-concerns"
  }, {
    "type": "depends-on",
    "display": "Value set Danger signs",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/danger-signs"
  }, {
    "type": "depends-on",
    "display": "Value set Number of miscarriages and/or abortions",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-miscarriages-and-or-abortions"
  }, {
    "type": "depends-on",
    "display": "Value set Number of live births",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-live-births"
  }, {
    "type": "depends-on",
    "display": "Value set Whether last live birth was preterm",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/whether-last-live-birth-was-preterm"
  }, {
    "type": "depends-on",
    "display": "Value set Number of stillbirths",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-stillbirths"
  }, {
    "type": "depends-on",
    "display": "Value set Parity",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/parity"
  }, {
    "type": "depends-on",
    "display": "Value set Number of caesarian sections",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-caesarian-sections"
  }, {
    "type": "depends-on",
    "display": "Value set Past pregnancy complications",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/past-pregnancy-complications"
  }, {
    "type": "depends-on",
    "display": "Value set Substance use during past pregnancy specification",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/substance-use-during-past-pregnancy-specification"
  }, {
    "type": "depends-on",
    "display": "Value set Allergies",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/allergies"
  }, {
    "type": "depends-on",
    "display": "Value set Past surgeries",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/past-surgeries"
  }, {
    "type": "depends-on",
    "display": "Value set Existing chronic health conditions",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/existing-chronic-health-conditions"
  }, {
    "type": "depends-on",
    "display": "Value set HIV diagnosis date",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-diagnosis-date"
  }, {
    "type": "depends-on",
    "display": "Value set Tetanus toxoid-containing vaccine (TTCV) immunization history",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-containing-vaccine-ttcv-immunization-history"
  }, {
    "type": "depends-on",
    "display": "Value set Flu immunization history",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/flu-immunization-history"
  }, {
    "type": "depends-on",
    "display": "Value set Current medications",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/current-medications"
  }, {
    "type": "depends-on",
    "display": "Value set Daily caffeine intake",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/daily-caffeine-intake"
  }, {
    "type": "depends-on",
    "display": "Value set Clinical enquiry for alcohol and other substance use done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/clinical-enquiry-for-alcohol-and-other-substance-use-done"
  }, {
    "type": "depends-on",
    "display": "Value set Current alcohol and/or other substance use",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/current-alcohol-and-or-other-substance-use"
  }, {
    "type": "depends-on",
    "display": "Value set Tobacco use",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/tobacco-use"
  }, {
    "type": "depends-on",
    "display": "Value set Last menstrual period (LMP) date",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/last-menstrual-period-lmp-date"
  }, {
    "type": "depends-on",
    "display": "Value set Recently quit tobacco products",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/recently-quit-tobacco-products"
  }, {
    "type": "depends-on",
    "display": "Value set Exposure to second-hand smoke",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/exposure-to-second-hand-smoke"
  }, {
    "type": "depends-on",
    "display": "Value set Partner HIV status (reported)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/partner-hiv-status-reported"
  }, {
    "type": "depends-on",
    "display": "Value set Contraceptive use of male condoms",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/contraceptive-use-of-male-condoms"
  }, {
    "type": "depends-on",
    "display": "Value set Contraceptive use of female condoms",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/contraceptive-use-of-female-condoms"
  }, {
    "type": "depends-on",
    "display": "Value set Ultrasound done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/ultrasound-done"
  }, {
    "type": "depends-on",
    "display": "Value set Gestational age",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/gestational-age"
  }, {
    "type": "depends-on",
    "display": "Value set Source of gestational age",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/source-of-gestational-age"
  }, {
    "type": "depends-on",
    "display": "Value set Expected date of delivery (EDD)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/expected-date-of-delivery-edd"
  }, {
    "type": "depends-on",
    "display": "Value set Number of pregnancies (gravida)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-pregnancies-gravida"
  }, {
    "type": "depends-on",
    "display": "Value set Ultrasound scan conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/ultrasound-scan-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Medication follow-up",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/medication-follow-up"
  }, {
    "type": "depends-on",
    "display": "Value set Persistent behaviours",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/persistent-behaviours"
  }, {
    "type": "depends-on",
    "display": "Value set Persistent physiological symptoms",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/persistent-physiological-symptoms"
  }, {
    "type": "depends-on",
    "display": "Value set Current physiological symptoms",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/current-physiological-symptoms"
  }, {
    "type": "depends-on",
    "display": "Value set Presenting signs and symptoms that trigger suspicion of IPV and clinical inquiry",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/presenting-signs-and-symptoms-that-trigger-suspicion-of-ipv-and-clinical-inquiry"
  }, {
    "type": "depends-on",
    "display": "Value set Woman discloses or is suspected to be subjected to intimate partner violence",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/woman-discloses-or-is-suspected-to-be-subjected-to-intimate-partner-violence"
  }, {
    "type": "depends-on",
    "display": "Value set Fetal movement",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/fetal-movement"
  }, {
    "type": "depends-on",
    "display": "Value set Has the woman  been subjected to intimate partner violence",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/has-the-woman-been-subjected-to-intimate-partner-violence"
  }, {
    "type": "depends-on",
    "display": "Value set Height",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/height"
  }, {
    "type": "depends-on",
    "display": "Value set Diastolic blood pressure",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/diastolic-blood-pressure"
  }, {
    "type": "depends-on",
    "display": "Value set Repeat systolic blood pressure",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/repeat-systolic-blood-pressure"
  }, {
    "type": "depends-on",
    "display": "Value set Repeat diastolic blood pressure",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/repeat-diastolic-blood-pressure"
  }, {
    "type": "depends-on",
    "display": "Value set Blood pressure cannot be taken",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-pressure-cannot-be-taken"
  }, {
    "type": "depends-on",
    "display": "Value set Reason blood pressure cannot be taken",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-blood-pressure-cannot-be-taken"
  }, {
    "type": "depends-on",
    "display": "Value set Symptoms of severe pre-eclampsia",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/symptoms-of-severe-pre-eclampsia"
  }, {
    "type": "depends-on",
    "display": "Value set Body temperature",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/body-temperature"
  }, {
    "type": "depends-on",
    "display": "Value set Second body temperature",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/second-body-temperature"
  }, {
    "type": "depends-on",
    "display": "Value set Pulse rate",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/pulse-rate"
  }, {
    "type": "depends-on",
    "display": "Value set Second pulse rate",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/second-pulse-rate"
  }, {
    "type": "depends-on",
    "display": "Value set Pre-gestational weight",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/pre-gestational-weight"
  }, {
    "type": "depends-on",
    "display": "Value set Pallor present",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/pallor-present"
  }, {
    "type": "depends-on",
    "display": "Value set Respiratory exam result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/respiratory-exam-result"
  }, {
    "type": "depends-on",
    "display": "Value set Respiratory exam result - Oximetry",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/respiratory-exam-result-oximetry"
  }, {
    "type": "depends-on",
    "display": "Value set Cardiac exam result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/cardiac-exam-result"
  }, {
    "type": "depends-on",
    "display": "Value set Breast exam result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/breast-exam-result"
  }, {
    "type": "depends-on",
    "display": "Value set Abdominal exam result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/abdominal-exam-result"
  }, {
    "type": "depends-on",
    "display": "Value set Pelvic exam result (visual)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/pelvic-exam-result-visual"
  }, {
    "type": "depends-on",
    "display": "Value set Cervical exam conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/cervical-exam-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Cervical dilation",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/cervical-dilation"
  }, {
    "type": "depends-on",
    "display": "Value set Oedema present",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/oedema-present"
  }, {
    "type": "depends-on",
    "display": "Value set Current  weight",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/current-weight"
  }, {
    "type": "depends-on",
    "display": "Value set Oedema type",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/oedema-type"
  }, {
    "type": "depends-on",
    "display": "Value set Oedema severity",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/oedema-severity"
  }, {
    "type": "depends-on",
    "display": "Value set Symphysis-fundal height (SFH)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/symphysis-fundal-height-sfh"
  }, {
    "type": "depends-on",
    "display": "Value set Fetal heartbeat present",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/fetal-heartbeat-present"
  }, {
    "type": "depends-on",
    "display": "Value set Fetal heart rate",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/fetal-heart-rate"
  }, {
    "type": "depends-on",
    "display": "Value set Second fetal heart rate",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/second-fetal-heart-rate"
  }, {
    "type": "depends-on",
    "display": "Value set Number of fetuses",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-fetuses"
  }, {
    "type": "depends-on",
    "display": "Value set Number of fetuses unknown",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-fetuses-unknown"
  }, {
    "type": "depends-on",
    "display": "Value set Fetal presentation",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/fetal-presentation"
  }, {
    "type": "depends-on",
    "display": "Value set Presenting signs/conditions for IPV",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/presenting-signs-conditions-for-ipv"
  }, {
    "type": "depends-on",
    "display": "Value set BMI",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/bmi"
  }, {
    "type": "depends-on",
    "display": "Value set Clinical enquiry for IPV",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/clinical-enquiry-for-ipv"
  }, {
    "type": "depends-on",
    "display": "Value set Reason clinical enquiry not done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-clinical-enquiry-not-done"
  }, {
    "type": "depends-on",
    "display": "Value set Types of IPV",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/types-of-ipv"
  }, {
    "type": "depends-on",
    "display": "Value set Weight category",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/weight-category"
  }, {
    "type": "depends-on",
    "display": "Value set Expected weight gain",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/expected-weight-gain"
  }, {
    "type": "depends-on",
    "display": "Value set Average weight gain per week",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/average-weight-gain-per-week"
  }, {
    "type": "depends-on",
    "display": "Value set Total weight gain (kg)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/total-weight-gain-kg"
  }, {
    "type": "depends-on",
    "display": "Value set Systolic blood pressure",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/systolic-blood-pressure"
  }, {
    "type": "depends-on",
    "display": "Value set Ultrasound required",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/ultrasound-required"
  }, {
    "type": "depends-on",
    "display": "Value set Blood type",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-type"
  }, {
    "type": "depends-on",
    "display": "Value set Rh factor",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/rh-factor"
  }, {
    "type": "depends-on",
    "display": "Value set HIV test required",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-test-required"
  }, {
    "type": "depends-on",
    "display": "Value set HIV test ordered",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-test-ordered"
  }, {
    "type": "depends-on",
    "display": "Value set Reason HIV test not done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-hiv-test-not-done"
  }, {
    "type": "depends-on",
    "display": "Value set HIV test result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-test-result"
  }, {
    "type": "depends-on",
    "display": "Value set HIV status",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-status"
  }, {
    "type": "depends-on",
    "display": "Value set Ultrasound scan ordered",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/ultrasound-scan-ordered"
  }, {
    "type": "depends-on",
    "display": "Value set Partner HIV test ordered",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/partner-hiv-test-ordered"
  }, {
    "type": "depends-on",
    "display": "Value set Partner HIV test result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/partner-hiv-test-result"
  }, {
    "type": "depends-on",
    "display": "Value set Partner HIV status (confirmed)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/partner-hiv-status-confirmed"
  }, {
    "type": "depends-on",
    "display": "Value set High risk for HIV",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/high-risk-for-hiv"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis B test required",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-test-required"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis B test ordered",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-test-ordered"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis B test type",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-test-type"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis B test result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-test-result"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis B diagnosis",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-diagnosis"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis C test required",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-test-required"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis C test ordered",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-test-ordered"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis C test type",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-test-type"
  }, {
    "type": "depends-on",
    "display": "Value set Reason Hepatitis C test not done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-hepatitis-c-test-not-done"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis C test result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-test-result"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis C diagnosis",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-diagnosis"
  }, {
    "type": "depends-on",
    "display": "Value set Syphilis test ordered",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-test-ordered"
  }, {
    "type": "depends-on",
    "display": "Value set Syphilis test type",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-test-type"
  }, {
    "type": "depends-on",
    "display": "Value set Reason syphilis test not done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-syphilis-test-not-done"
  }, {
    "type": "depends-on",
    "display": "Value set Syphilis test result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-test-result"
  }, {
    "type": "depends-on",
    "display": "Value set Syphilis diagnosis",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-diagnosis"
  }, {
    "type": "depends-on",
    "display": "Value set Urine test required",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-test-required"
  }, {
    "type": "depends-on",
    "display": "Value set Reason ultrasound scan not done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-ultrasound-scan-not-done"
  }, {
    "type": "depends-on",
    "display": "Value set Urine test ordered",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-test-ordered"
  }, {
    "type": "depends-on",
    "display": "Value set Urine test type",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-test-type"
  }, {
    "type": "depends-on",
    "display": "Value set Reason urine test not done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-urine-test-not-done"
  }, {
    "type": "depends-on",
    "display": "Value set Midstream urine culture (recommended)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/midstream-urine-culture-recommended"
  }, {
    "type": "depends-on",
    "display": "Value set Midstream urine Gram-staining",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/midstream-urine-gram-staining"
  }, {
    "type": "depends-on",
    "display": "Value set Urine dipstick result - nitrites",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-dipstick-result-nitrites"
  }, {
    "type": "depends-on",
    "display": "Value set Urine dipstick result - leukocytes",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-dipstick-result-leukocytes"
  }, {
    "type": "depends-on",
    "display": "Value set Urine dipstick result - protein",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-dipstick-result-protein"
  }, {
    "type": "depends-on",
    "display": "Value set Urine dipstick result - glucose",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-dipstick-result-glucose"
  }, {
    "type": "depends-on",
    "display": "Value set Amniotic fluid level",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/amniotic-fluid-level"
  }, {
    "type": "depends-on",
    "display": "Value set Asymptomatic bacteriuria (ASB) diagnosis",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/asymptomatic-bacteriuria-asb-diagnosis"
  }, {
    "type": "depends-on",
    "display": "Value set Blood glucose test ordered",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-glucose-test-ordered"
  }, {
    "type": "depends-on",
    "display": "Value set Blood glucose test type",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-glucose-test-type"
  }, {
    "type": "depends-on",
    "display": "Value set Fasting plasma glucose",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/fasting-plasma-glucose"
  }, {
    "type": "depends-on",
    "display": "Value set 75 g oral glucose tolerance test (OGTT) - fasting glucose",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/75-g-oral-glucose-tolerance-test-ogtt-fasting-glucose"
  }, {
    "type": "depends-on",
    "display": "Value set 75 g oral glucose tolerance test (OGTT) - 1 hour",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/75-g-oral-glucose-tolerance-test-ogtt-1-hour"
  }, {
    "type": "depends-on",
    "display": "Value set 75 g oral glucose tolerance test (OGTT) - 2 hours",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/75-g-oral-glucose-tolerance-test-ogtt-2-hours"
  }, {
    "type": "depends-on",
    "display": "Value set Random plasma glucose",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/random-plasma-glucose"
  }, {
    "type": "depends-on",
    "display": "Value set Blood glucose test result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-glucose-test-result"
  }, {
    "type": "depends-on",
    "display": "Value set Placenta location",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/placenta-location"
  }, {
    "type": "depends-on",
    "display": "Value set Gestational diabetes mellitus (GDM) diagnosis",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/gestational-diabetes-mellitus-gdm-diagnosis"
  }, {
    "type": "depends-on",
    "display": "Value set Diabetes mellitus (DM) during pregnancy diagnosis",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/diabetes-mellitus-dm-during-pregnancy-diagnosis"
  }, {
    "type": "depends-on",
    "display": "Value set Blood haemoglobin test ordered",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-haemoglobin-test-ordered"
  }, {
    "type": "depends-on",
    "display": "Value set Blood haemoglobin test type",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-haemoglobin-test-type"
  }, {
    "type": "depends-on",
    "display": "Value set Reason blood haemoglobin test not done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-blood-haemoglobin-test-not-done"
  }, {
    "type": "depends-on",
    "display": "Value set Blood haemoglobin test result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-haemoglobin-test-result"
  }, {
    "type": "depends-on",
    "display": "Value set Anaemia diagnosis",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/anaemia-diagnosis"
  }, {
    "type": "depends-on",
    "display": "Value set Hematocrit (Ht)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hematocrit-ht"
  }, {
    "type": "depends-on",
    "display": "Value set White blood cell (WBC) count",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/white-blood-cell-wbc-count"
  }, {
    "type": "depends-on",
    "display": "Value set Platelet count",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/platelet-count"
  }, {
    "type": "depends-on",
    "display": "Value set TB screening ordered",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/tb-screening-ordered"
  }, {
    "type": "depends-on",
    "display": "Value set Reason TB screening not done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-tb-screening-not-done"
  }, {
    "type": "depends-on",
    "display": "Value set TB screening result",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/tb-screening-result"
  }, {
    "type": "depends-on",
    "display": "Value set Other test(s) result(s)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/other-tests-results"
  }, {
    "type": "depends-on",
    "display": "Value set Blood haemoglobin test conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-haemoglobin-test-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Blood type test conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-type-test-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis B test conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-test-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis C test conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-test-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set HIV test conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-test-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Other tests conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/other-tests-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Partner HIV test conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/partner-hiv-test-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Syphilis test conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-test-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set TB screening conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/tb-screening-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Urine test conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-test-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Caffeine Reduction",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-caffeine-reduction"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Alcohol Substance Abuse",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-alcohol-substance-abuse"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Tobacco Cessation",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-tobacco-cessation"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Second-Hand Smoke",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-second-hand-smoke"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Condom Use",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-condom-use"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Non-Pharma Measures to Relieve Nausea and Vomiting",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-non-pharma-measures-to-relieve-nausea-and-vomiting"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Non-Pharmacological Treatment for Relief of Leg Cramps",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-non-pharmacological-treatment-for-relief-of-leg-cramps"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Use of Magnesium-and Calcium to Relieve Leg Cramps",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-use-of-magnesium-and-calcium-to-relieve-leg-cramps"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Dietary Modifications to Relieve Constipation",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-dietary-modifications-to-relieve-constipation"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Use of Wheat Bran or Other Fibre Supplements to Relieve Constipation",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-use-of-wheat-bran-or-other-fibre-supplements-to-relieve-constipation"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Regular Exercise Physiotherapy Support Belts and Acupuncture to Relieve Low Back and Pelvic Pain",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-regular-exercise-physiotherapy-support-belts-and-acupuncture-to-relieve-low-back-and-pelvic-pain"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Non-Pharmacological Options for Varicose Veins and Oedema",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-non-pharmacological-options-for-varicose-veins-and-oedema"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Pharmacological Measures to Relieve Nausea and Vomiting",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-pharmacological-measures-to-relieve-nausea-and-vomiting"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Diet and Lifestyle Changes to Prevent and Relieve Heartburn",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-diet-and-lifestyle-changes-to-prevent-and-relieve-heartburn"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Antacid Preparations to Relieve Heartburn",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-antacid-preparations-to-relieve-heartburn"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Healthy Eating and Keeping Physically Active",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-healthy-eating-and-keeping-physically-active"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Increasing Daily Energy Protein Intake",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-increasing-daily-energy-protein-intake"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on Balanced Energy and Protein Dietary Supplementation",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-balanced-energy-and-protein-dietary-supplementation"
  }, {
    "type": "depends-on",
    "display": "Value set Hypertension",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hypertension"
  }, {
    "type": "depends-on",
    "display": "Value set Syphilis counselling, treatment and further testing",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-counselling-treatment-and-further-testing"
  }, {
    "type": "depends-on",
    "display": "Value set Seven-day antibiotic regimen for asymptomatic bacteriuria (ASB) provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/seven-day-antibiotic-regimen-for-asymptomatic-bacteriuria-asb-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Reason seven-day antibiotic regimen for asymptomatic bacteriuria (ASB) not provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-seven-day-antibiotic-regimen-for-asymptomatic-bacteriuria-asb-not-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on TB screening positive",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-tb-screening-positive"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on gestational diabetes mellitus (GDM)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-gestational-diabetes-mellitus-gdm"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on diabetes mellitus (DM)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-diabetes-mellitus-dm"
  }, {
    "type": "depends-on",
    "display": "Value set Severe hypertension",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/severe-hypertension"
  }, {
    "type": "depends-on",
    "display": "Value set Pre-eclampsia",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/pre-eclampsia"
  }, {
    "type": "depends-on",
    "display": "Value set Severe pre-eclampsia",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/severe-pre-eclampsia"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on hypertension",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-hypertension"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on HIV positive",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-hiv-positive"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on hepatitis B positive",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-hepatitis-b-positive"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on hepatitis C positive",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-hepatitis-c-positive"
  }, {
    "type": "depends-on",
    "display": "Value set Syphilis counselling and treatment",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-counselling-and-treatment"
  }, {
    "type": "depends-on",
    "display": "Value set Reason iron and folic acid not prescribed",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-iron-and-folic-acid-not-prescribed"
  }, {
    "type": "depends-on",
    "display": "Value set Vitamin A supplementation not provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/vitamin-a-supplementation-not-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Reason calcium not prescribed",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-calcium-not-prescribed"
  }, {
    "type": "depends-on",
    "display": "Value set Preventive antihelminthic treatment provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/preventive-antihelminthic-treatment-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Malaria Prophylaxis",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/malaria-prophylaxis"
  }, {
    "type": "depends-on",
    "display": "Value set Reason no preventative treatment provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-no-preventative-treatment-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on malaria prevention",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-malaria-prevention"
  }, {
    "type": "depends-on",
    "display": "Value set IPTp-SP dose 1 provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/iptp-sp-dose-1-provided"
  }, {
    "type": "depends-on",
    "display": "Value set IPTp-SP dose 2 provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/iptp-sp-dose-2-provided"
  }, {
    "type": "depends-on",
    "display": "Value set IPTp-SP dose 3 provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/iptp-sp-dose-3-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Referral to Hospital",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/referral-to-hospital"
  }, {
    "type": "depends-on",
    "display": "Value set Risk of pre-eclampsia",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/risk-of-pre-eclampsia"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on seeking care when danger signs occur",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-seeking-care-when-danger-signs-occur"
  }, {
    "type": "depends-on",
    "display": "Value set Counsel to immediately go to the hospital if severe danger signs are present",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counsel-to-immediately-go-to-the-hospital-if-severe-danger-signs-are-present"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on ANC contact schedule conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-anc-contact-schedule-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on birth preparedness and complications readiness",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-birth-preparedness-and-complications-readiness"
  }, {
    "type": "depends-on",
    "display": "Value set Planned birth place",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/planned-birth-place"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on Rh factor negative",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-rh-factor-negative"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on intrapartum antibiotic to prevent early neonatal Group B Streptococcus (GBS) infection",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-intrapartum-antibiotic-to-prevent-early-neonatal-group-b-streptococcus-gbs-infection"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling on postpartum family planning conducted",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-postpartum-family-planning-conducted"
  }, {
    "type": "depends-on",
    "display": "Value set Family planning method selected",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/family-planning-method-selected"
  }, {
    "type": "depends-on",
    "display": "Value set Pre-eclampsia risk counselling provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/pre-eclampsia-risk-counselling-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Counselling conducted on breastfeeding",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-breastfeeding"
  }, {
    "type": "depends-on",
    "display": "Value set Reason aspirin not prescribed",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-aspirin-not-prescribed"
  }, {
    "type": "depends-on",
    "display": "Value set Risk of gestational diabetes mellitus (GDM)",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/risk-of-gestational-diabetes-mellitus-gdm"
  }, {
    "type": "depends-on",
    "display": "Value set Reason PrEP for HIV prevention was not provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-prep-for-hiv-prevention-was-not-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Reason tetanus toxoid (TT) vaccination not provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-tetanus-toxoid-tt-vaccination-not-provided"
  }, {
    "type": "depends-on",
    "display": "Value set No doses of hepatitis B",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/no-doses-of-hepatitis-b"
  }, {
    "type": "depends-on",
    "display": "Value set Reason Hep B vaccination not provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-hep-b-vaccination-not-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Reason flu vaccine not provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-flu-vaccine-not-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Flu immunization provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/flu-immunization-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis B-1 immunization provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-1-immunization-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis B-2 immunization provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-2-immunization-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Hepatitis B-3 immunization provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-3-immunization-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Tetanus toxoid (TT) 1 immunization provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-tt-1-immunization-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Tetanus toxoid (TT) 2 immunization provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-tt-2-immunization-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Tetanus toxoid (TT) 3 immunization provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-tt-3-immunization-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Tetanus toxoid (TT) 4 immunization provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-tt-4-immunization-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Tetanus toxoid (TT) 5 immunization provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-tt-5-immunization-provided"
  }, {
    "type": "depends-on",
    "display": "Value set IPV first-line support provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/ipv-first-line-support-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Do you believe he could kill you",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/do-you-believe-he-could-kill-you"
  }, {
    "type": "depends-on",
    "display": "Value set Referrals made as part of first-line support and care",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/referrals-made-as-part-of-first-line-support-and-care"
  }, {
    "type": "depends-on",
    "display": "Value set Was client referred",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/was-client-referred"
  }, {
    "type": "depends-on",
    "display": "Value set Reason IPV first line support not done",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-ipv-first-line-support-not-done"
  }, {
    "type": "depends-on",
    "display": "Value set What additional type of care provided",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/what-additional-type-of-care-provided"
  }, {
    "type": "depends-on",
    "display": "Value set Safety assessement",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/safety-assessement"
  }, {
    "type": "depends-on",
    "display": "Value set Has the physical violence happened more often or gotten worse over the past 6 months",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/has-the-physical-violence-happened-more-often-or-gotten-worse-over-the-past-6-months"
  }, {
    "type": "depends-on",
    "display": "Value set Has he ever used a weapon or threatened you with a weapon",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/has-he-ever-used-a-weapon-or-threatened-you-with-a-weapon"
  }, {
    "type": "depends-on",
    "display": "Value set Has he ever tried to strangle you",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/has-he-ever-tried-to-strangle-you"
  }, {
    "type": "depends-on",
    "display": "Value set Has he ever beaten you when you were pregnant",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/has-he-ever-beaten-you-when-you-were-pregnant"
  }, {
    "type": "depends-on",
    "display": "Value set Is he violently and constantly jealous of you",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/is-he-violently-and-constantly-jealous-of-you"
  }, {
    "type": "depends-on",
    "display": "Value set Emergency referral",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/emergency-referral"
  }, {
    "type": "depends-on",
    "display": "Value set Reason for referral",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-for-referral"
  }, {
    "type": "depends-on",
    "display": "Value set Any treatment given before referral",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/any-treatment-given-before-referral"
  }, {
    "type": "depends-on",
    "display": "Value set Reason for closing ANC record",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-for-closing-anc-record"
  }, {
    "type": "depends-on",
    "display": "Value set Date of death",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/date-of-death"
  }, {
    "type": "depends-on",
    "display": "Value set Cause of death",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/cause-of-death"
  }, {
    "type": "depends-on",
    "display": "Value set Delivery date",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/delivery-date"
  }, {
    "type": "depends-on",
    "display": "Value set Place of delivery",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/place-of-delivery"
  }, {
    "type": "depends-on",
    "display": "Value set Preterm Birth",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/preterm-birth"
  }, {
    "type": "depends-on",
    "display": "Value set Delivery mode",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/delivery-mode"
  }, {
    "type": "depends-on",
    "display": "Value set Birth weight",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/birth-weight"
  }, {
    "type": "depends-on",
    "display": "Value set Exclusively breastfeeding",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/exclusively-breastfeeding"
  }, {
    "type": "depends-on",
    "display": "Value set Delivery complications",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/delivery-complications"
  }, {
    "type": "depends-on",
    "display": "Value set Date of miscarriage or abortion",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/date-of-miscarriage-or-abortion"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "ANC contact number",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Co-habitants",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Pregnancy confirmed",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason for coming to facility",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Specific health concern(s)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Danger signs",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Number of miscarriages and/or abortions",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Number of live births",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Whether last live birth was preterm",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Number of stillbirths",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Parity",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Number of caesarian sections",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Past pregnancy complications",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Substance use during past pregnancy specification",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Allergies",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Past surgeries",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Existing chronic health conditions",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "HIV diagnosis date",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Tetanus toxoid-containing vaccine (TTCV) immunization history",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Flu immunization history",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Current medications",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Daily caffeine intake",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Clinical enquiry for alcohol and other substance use done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Current alcohol and/or other substance use",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Tobacco use",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Last menstrual period (LMP) date",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Recently quit tobacco products",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Exposure to second-hand smoke",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Partner HIV status (reported)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Contraceptive use of male condoms",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Contraceptive use of female condoms",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Ultrasound done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Gestational age",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Source of gestational age",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Expected date of delivery (EDD)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Number of pregnancies (gravida)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Ultrasound",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Medication follow-up",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Persistent behaviours",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Persistent physiological symptoms",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Current physiological symptoms",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Presenting signs and symptoms that trigger suspicion of IPV and clinical inquiry",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Woman discloses or is suspected to be subjected to intimate partner violence",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Fetal movement",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Has the woman  been subjected to intimate partner violence",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Height",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Diastolic blood pressure",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Repeat systolic blood pressure",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Repeat diastolic blood pressure",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Blood pressure cannot be taken",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason blood pressure cannot be taken",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Symptoms of severe pre-eclampsia",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Body temperature",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Second body temperature",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Pulse rate",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Second pulse rate",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Pre-gestational weight",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Pallor present",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Respiratory exam result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Oximetry",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Cardiac exam result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Breast exam result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Abdominal exam result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Pelvic exam result (visual)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Cervical exam conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Cervical dilation",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Oedema present",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Current  weight",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Oedema type",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Oedema severity",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Symphysis-fundal height (SFH)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Fetal heartbeat present",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Fetal heart rate",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Second fetal heart rate",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Number of fetuses",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Number of fetuses unknown",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Fetal presentation",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Presenting signs/conditions for IPV",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "BMI",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Clinical enquiry for IPV",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason clinical enquiry not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Types of IPV",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Weight category",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Expected weight gain",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Average weight gain per week",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Total weight gain (kg)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Systolic blood pressure",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Ultrasound required",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Blood type",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Rh factor",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "HIV test required",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "HIV test ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Reason HIV test not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "HIV test result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "HIV status",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Ultrasound scan ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Partner HIV test ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Partner HIV test result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Partner HIV status (confirmed)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "High risk for HIV",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Hepatitis B test required",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Hepatitis B test ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Hepatitis B test type",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Hepatitis B test result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Hepatitis B diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Hepatitis C test required",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Hepatitis C test ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Hepatitis C test type",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason Hepatitis C test not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Hepatitis C test result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Hepatitis C diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Syphilis test ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Syphilis test type",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason syphilis test not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Syphilis test result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Syphilis diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Urine test required",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason ultrasound scan not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Urine test ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Urine test type",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason urine test not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Midstream urine culture (recommended)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Midstream urine Gram-staining",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Urine dipstick result - nitrites",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Urine dipstick result - leukocytes",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Urine dipstick result - protein",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Urine dipstick result - glucose",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Amniotic fluid level",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Asymptomatic bacteriuria (ASB) diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Blood glucose test ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Blood glucose test type",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Fasting plasma glucose",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "75 g oral glucose tolerance test (OGTT) - fasting glucose",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "75 g oral glucose tolerance test (OGTT) - 1 hour",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "75 g oral glucose tolerance test (OGTT) - 2 hours",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Random plasma glucose",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Blood glucose test result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Placenta location",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Gestational diabetes mellitus (GDM) diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Diabetes mellitus (DM) during pregnancy diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Blood haemoglobin test ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Blood haemoglobin test type",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason blood haemoglobin test not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Blood haemoglobin test result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Anaemia diagnosis",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Hematocrit (Ht)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "White blood cell (WBC) count",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Platelet count",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "TB screening ordered",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Reason TB screening not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "TB screening result",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Other test(s) result(s)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Blood Haemoglobin Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Blood Type Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Hepatitis B Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Hepatitis C Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "HIV Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Other Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Partner HIV Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Syphilis Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "TB Screening",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Urine Test",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on caffeine reduction",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on alcohol / substance use was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on caffeine reduction was not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on tobacco cessation",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on tobacco cessation was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on second-hand smoke",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on second-hand smoke was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on condom use",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on condom use was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on alcohol / substance use",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on non-pharma measures to relieve nausea and vomiting",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on non-pharmacological treatment for the relief of leg cramps was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on use of magnesium and calcium to relieve leg cramps",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on use of magnesium and calcium to relieve leg cramps was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on dietary modifications to relieve constipation",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on dietary modifications to relieve constipation was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on use of wheat bran or other fibre supplements to relieve constipation",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on use of wheat bran or other fibre supplements to relieve constipation was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on regular exercise, physiotherapy, support belts and acupuncture to relieve low back and pelvic pain",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on regular exercise, physiotherapy, support belts and acupuncture to relieve low back and pelvic pain was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on non-pharmacological options for varicose veins and oedema",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on non-pharma measures to relieve nausea and vomiting was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on non-pharmacological options for varicose veins and oedema was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on pharmacological treatments for nausea and vomiting",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on pharmacological treatments for nausea and vomiting was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on diet and lifestyle changes to prevent and relieve heartburn",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on diet and lifestyle changes to prevent and relieve heartburn was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on antacid preparations to relieve heartburn",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on antacid preparations to relieve heartburn was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling on non-pharmacological treatment for the relief of leg cramps",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on healthy eating and keeping physically active",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on healthy eating and keeping physically active was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on increasing daily energy and protein intake",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on increasing daily energy and protein intake was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on balanced energy and protein dietary supplementation",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on balanced energy and protein dietary supplementation was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Hypertension",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Syphilis counselling, treatment and further testing",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Seven-day antibiotic regimen for asymptomatic bacteriuria (ASB) provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason seven-day antibiotic regimen for asymptomatic bacteriuria (ASB) not provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on TB screening positive",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on gestational diabetes mellitus (GDM)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on diabetes mellitus (DM)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Severe hypertension",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Pre-eclampsia",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Severe pre-eclampsia",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Counselling conducted on hypertension",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on HIV positive",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on hepatitis B positive",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on hepatitis C positive",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Syphilis counselling and treatment",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason iron and folic acid not prescribed",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Vitamin A supplementation not provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Reason calcium not prescribed",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Preventive antihelminthic treatment provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason malaria prophylaxis not provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Reason no preventative treatment provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Counselling conducted on malaria prevention",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason counselling on malaria prevention was not conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Malaria Prophylaxis (IPTp-SP) Dose 1",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Malaria Prophylaxis (IPTp-SP) Dose 2",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Malaria Prophylaxis (IPTp-SP) Dose 3",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Referred to hospital",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Reason referral not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Risk of pre-eclampsia",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Counselling conducted on seeking care when danger signs occur",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counsel to immediately go to the hospital if severe danger signs are present",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling on ANC contact schedule conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on birth preparedness and complications readiness",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Planned birth place",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Counselling conducted on Rh factor negative",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on intrapartum antibiotic to prevent early neonatal Group B Streptococcus (GBS) infection",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling on postpartum family planning conducted",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Family planning method selected",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Pre-eclampsia risk counselling provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Counselling conducted on breastfeeding",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Reason aspirin not prescribed",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Risk of gestational diabetes mellitus (GDM)",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Condition"
  }, {
    "name": "Reason PrEP for HIV prevention was not provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "MedicationRequest"
  }, {
    "name": "Reason tetanus toxoid (TT) vaccination not provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "No doses of hepatitis B",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason Hep B vaccination not provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Reason flu vaccine not provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Flu Immunization",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Hepatitis B-1 Immunization",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Hepatitis B-2 Immunization",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Hepatitis B-3 Immunization",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Tetanus toxoid (TT) 1 Immunization",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Tetanus toxoid (TT) 2 Immunization",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Tetanus toxoid (TT) 3 Immunization",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Tetanus toxoid (TT) 4 Immunization",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "Tetanus toxoid (TT) 5 Immunization",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Immunization"
  }, {
    "name": "IPV first-line support provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Do you believe he could kill you",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Referrals made as part of first-line support and care",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Was client referred",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason IPV first line support not done",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "What additional type of care provided",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Procedure"
  }, {
    "name": "Safety assessement",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Has the physical violence happened more often or gotten worse over the past 6 months",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Has he ever used a weapon or threatened you with a weapon",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Has he ever tried to strangle you",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Has he ever beaten you when you were pregnant",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Is he violently and constantly jealous of you",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Referral",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Reason for referral",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "ServiceRequest"
  }, {
    "name": "Any treatment given before referral",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Reason for closing ANC record",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Date of death",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Cause of death",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Delivery date",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Place of delivery",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Encounter"
  }, {
    "name": "Preterm Birth",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Delivery mode",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Birth weight",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Exclusively breastfeeding",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Delivery complications",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  }, {
    "name": "Date of miscarriage or abortion",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Observation"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/anc-contact-number"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/co-habitants"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/pregnancy-confirmed"
    } ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "codeFilter": [ {
      "path": "type",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-for-coming-to-facility"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/specific-health-concerns"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/danger-signs"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-miscarriages-and-or-abortions"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-live-births"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/whether-last-live-birth-was-preterm"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-stillbirths"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/parity"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-caesarian-sections"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/past-pregnancy-complications"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/substance-use-during-past-pregnancy-specification"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/allergies"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/past-surgeries"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/existing-chronic-health-conditions"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-diagnosis-date"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-containing-vaccine-ttcv-immunization-history"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/flu-immunization-history"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/current-medications"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/daily-caffeine-intake"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/clinical-enquiry-for-alcohol-and-other-substance-use-done"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/current-alcohol-and-or-other-substance-use"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/tobacco-use"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/last-menstrual-period-lmp-date"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/recently-quit-tobacco-products"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/exposure-to-second-hand-smoke"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/partner-hiv-status-reported"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/contraceptive-use-of-male-condoms"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/contraceptive-use-of-female-condoms"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/ultrasound-done"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/gestational-age"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/source-of-gestational-age"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/expected-date-of-delivery-edd"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-pregnancies-gravida"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/ultrasound-scan-conducted"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/medication-follow-up"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/persistent-behaviours"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/persistent-physiological-symptoms"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/current-physiological-symptoms"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/presenting-signs-and-symptoms-that-trigger-suspicion-of-ipv-and-clinical-inquiry"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/woman-discloses-or-is-suspected-to-be-subjected-to-intimate-partner-violence"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/fetal-movement"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/has-the-woman-been-subjected-to-intimate-partner-violence"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/height"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/diastolic-blood-pressure"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/repeat-systolic-blood-pressure"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/repeat-diastolic-blood-pressure"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-pressure-cannot-be-taken"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-blood-pressure-cannot-be-taken"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/symptoms-of-severe-pre-eclampsia"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/body-temperature"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/second-body-temperature"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/pulse-rate"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/second-pulse-rate"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/pre-gestational-weight"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/pallor-present"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/respiratory-exam-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/respiratory-exam-result-oximetry"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/cardiac-exam-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/breast-exam-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/abdominal-exam-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/pelvic-exam-result-visual"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/cervical-exam-conducted"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/cervical-dilation"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/oedema-present"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/current-weight"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/oedema-type"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/oedema-severity"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/symphysis-fundal-height-sfh"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/fetal-heartbeat-present"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/fetal-heart-rate"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/second-fetal-heart-rate"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-fetuses"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/number-of-fetuses-unknown"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/fetal-presentation"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/presenting-signs-conditions-for-ipv"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/bmi"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/clinical-enquiry-for-ipv"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-clinical-enquiry-not-done"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/types-of-ipv"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/weight-category"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/expected-weight-gain"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/average-weight-gain-per-week"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/total-weight-gain-kg"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/systolic-blood-pressure"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/ultrasound-required"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-type"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/rh-factor"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-test-required"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-test-ordered"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-hiv-test-not-done"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-test-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-status"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/ultrasound-scan-ordered"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/partner-hiv-test-ordered"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/partner-hiv-test-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/partner-hiv-status-confirmed"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/high-risk-for-hiv"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-test-required"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-test-ordered"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-test-type"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-test-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-diagnosis"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-test-required"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-test-ordered"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-test-type"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-hepatitis-c-test-not-done"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-test-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-diagnosis"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-test-ordered"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-test-type"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-syphilis-test-not-done"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-test-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-diagnosis"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-test-required"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-ultrasound-scan-not-done"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-test-ordered"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-test-type"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-urine-test-not-done"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/midstream-urine-culture-recommended"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/midstream-urine-gram-staining"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-dipstick-result-nitrites"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-dipstick-result-leukocytes"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-dipstick-result-protein"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-dipstick-result-glucose"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/amniotic-fluid-level"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/asymptomatic-bacteriuria-asb-diagnosis"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-glucose-test-ordered"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-glucose-test-type"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/fasting-plasma-glucose"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/75-g-oral-glucose-tolerance-test-ogtt-fasting-glucose"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/75-g-oral-glucose-tolerance-test-ogtt-1-hour"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/75-g-oral-glucose-tolerance-test-ogtt-2-hours"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/random-plasma-glucose"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-glucose-test-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/placenta-location"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/gestational-diabetes-mellitus-gdm-diagnosis"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/diabetes-mellitus-dm-during-pregnancy-diagnosis"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-haemoglobin-test-ordered"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-haemoglobin-test-type"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-blood-haemoglobin-test-not-done"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-haemoglobin-test-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/anaemia-diagnosis"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hematocrit-ht"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/white-blood-cell-wbc-count"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/platelet-count"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/tb-screening-ordered"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-tb-screening-not-done"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/tb-screening-result"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/other-tests-results"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-haemoglobin-test-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/blood-type-test-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-test-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-c-test-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hiv-test-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/other-tests-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/partner-hiv-test-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-test-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/tb-screening-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/urine-test-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-caffeine-reduction"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-alcohol-substance-abuse"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-caffeine-reduction"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-tobacco-cessation"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-tobacco-cessation"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-second-hand-smoke"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-second-hand-smoke"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-condom-use"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-condom-use"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-alcohol-substance-abuse"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-non-pharma-measures-to-relieve-nausea-and-vomiting"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-non-pharmacological-treatment-for-relief-of-leg-cramps"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-use-of-magnesium-and-calcium-to-relieve-leg-cramps"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-use-of-magnesium-and-calcium-to-relieve-leg-cramps"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-dietary-modifications-to-relieve-constipation"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-dietary-modifications-to-relieve-constipation"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-use-of-wheat-bran-or-other-fibre-supplements-to-relieve-constipation"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-use-of-wheat-bran-or-other-fibre-supplements-to-relieve-constipation"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-regular-exercise-physiotherapy-support-belts-and-acupuncture-to-relieve-low-back-and-pelvic-pain"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-regular-exercise-physiotherapy-support-belts-and-acupuncture-to-relieve-low-back-and-pelvic-pain"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-non-pharmacological-options-for-varicose-veins-and-oedema"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-non-pharma-measures-to-relieve-nausea-and-vomiting"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-non-pharmacological-options-for-varicose-veins-and-oedema"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-pharmacological-measures-to-relieve-nausea-and-vomiting"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-pharmacological-measures-to-relieve-nausea-and-vomiting"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-diet-and-lifestyle-changes-to-prevent-and-relieve-heartburn"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-diet-and-lifestyle-changes-to-prevent-and-relieve-heartburn"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-antacid-preparations-to-relieve-heartburn"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-antacid-preparations-to-relieve-heartburn"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-non-pharmacological-treatment-for-relief-of-leg-cramps"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-healthy-eating-and-keeping-physically-active"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-healthy-eating-and-keeping-physically-active"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-increasing-daily-energy-protein-intake"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-increasing-daily-energy-protein-intake"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-balanced-energy-and-protein-dietary-supplementation"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-balanced-energy-and-protein-dietary-supplementation"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hypertension"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-counselling-treatment-and-further-testing"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/seven-day-antibiotic-regimen-for-asymptomatic-bacteriuria-asb-provided"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-seven-day-antibiotic-regimen-for-asymptomatic-bacteriuria-asb-not-provided"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-tb-screening-positive"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-gestational-diabetes-mellitus-gdm"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-diabetes-mellitus-dm"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/severe-hypertension"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/pre-eclampsia"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/severe-pre-eclampsia"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-hypertension"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-hiv-positive"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-hepatitis-b-positive"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-hepatitis-c-positive"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/syphilis-counselling-and-treatment"
    } ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "codeFilter": [ {
      "path": "medication",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-iron-and-folic-acid-not-prescribed"
    } ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "codeFilter": [ {
      "path": "medication",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/vitamin-a-supplementation-not-provided"
    } ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "codeFilter": [ {
      "path": "medication",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-calcium-not-prescribed"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/preventive-antihelminthic-treatment-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/malaria-prophylaxis"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-no-preventative-treatment-provided"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-malaria-prevention"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-malaria-prevention"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/iptp-sp-dose-1-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/iptp-sp-dose-2-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/iptp-sp-dose-3-provided"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/referral-to-hospital"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/referral-to-hospital"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/risk-of-pre-eclampsia"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-seeking-care-when-danger-signs-occur"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counsel-to-immediately-go-to-the-hospital-if-severe-danger-signs-are-present"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-anc-contact-schedule-conducted"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-birth-preparedness-and-complications-readiness"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/planned-birth-place"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-rh-factor-negative"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-intrapartum-antibiotic-to-prevent-early-neonatal-group-b-streptococcus-gbs-infection"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-on-postpartum-family-planning-conducted"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/family-planning-method-selected"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/pre-eclampsia-risk-counselling-provided"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/counselling-conducted-on-breastfeeding"
    } ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "codeFilter": [ {
      "path": "medication",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-aspirin-not-prescribed"
    } ]
  }, {
    "type": "Condition",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Condition" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/risk-of-gestational-diabetes-mellitus-gdm"
    } ]
  }, {
    "type": "MedicationRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/MedicationRequest" ],
    "codeFilter": [ {
      "path": "medication",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-prep-for-hiv-prevention-was-not-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-tetanus-toxoid-tt-vaccination-not-provided"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/no-doses-of-hepatitis-b"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-hep-b-vaccination-not-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-flu-vaccine-not-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/flu-immunization-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-1-immunization-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-2-immunization-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/hepatitis-b-3-immunization-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-tt-1-immunization-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-tt-2-immunization-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-tt-3-immunization-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-tt-4-immunization-provided"
    } ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "codeFilter": [ {
      "path": "vaccineCode",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/tetanus-toxoid-tt-5-immunization-provided"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/ipv-first-line-support-provided"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/do-you-believe-he-could-kill-you"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/referrals-made-as-part-of-first-line-support-and-care"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/was-client-referred"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-ipv-first-line-support-not-done"
    } ]
  }, {
    "type": "Procedure",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Procedure" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/what-additional-type-of-care-provided"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/safety-assessement"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/has-the-physical-violence-happened-more-often-or-gotten-worse-over-the-past-6-months"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/has-he-ever-used-a-weapon-or-threatened-you-with-a-weapon"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/has-he-ever-tried-to-strangle-you"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/has-he-ever-beaten-you-when-you-were-pregnant"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/is-he-violently-and-constantly-jealous-of-you"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/emergency-referral"
    } ]
  }, {
    "type": "ServiceRequest",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/ServiceRequest" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-for-referral"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/any-treatment-given-before-referral"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/reason-for-closing-anc-record"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/date-of-death"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/cause-of-death"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/delivery-date"
    } ]
  }, {
    "type": "Encounter",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Encounter" ],
    "codeFilter": [ {
      "path": "type",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/place-of-delivery"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/preterm-birth"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/delivery-mode"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/birth-weight"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/exclusively-breastfeeding"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/delivery-complications"
    } ]
  }, {
    "type": "Observation",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Observation" ],
    "codeFilter": [ {
      "path": "code",
      "valueSet": "http://fhir.org/guides/who/anc-cds/ValueSet/date-of-miscarriage-or-abortion"
    } ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  } ]
}