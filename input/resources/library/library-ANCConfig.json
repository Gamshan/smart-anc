{
  "resourceType": "Library",
  "id": "ANCConfig",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/who/anc-cds/Library/ANCConfig",
  "name": "ANCConfig",
  "parameter": [ {
    "name": "Population prevalence of undernourishment",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population prevalence of anaemia",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population with low dietary calcium intake",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Population prevalence of tuberculosis (TB)",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "Population with vitamin A deficiency",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Population prevalence of soil-transmitted helminth infection",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population incidence of HIV in the absence of PrEP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population prevalence of HIV in key populations (men who have sex with men, people in prison or other closed settings, people who inject drugs, sex workers and transgender people) ",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Population prevalence of HIV in pregnant women",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Malaria-endemic setting",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Population prevalence of syphilis in pregnant women",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population prevalence of hepatitis B",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population prevalence of hepatitis C",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Minimum requirements for IPV assessment",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Ultrasound available at the health-care facility",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Prevalence of HIV in pregnant women in the catchment area",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBBTkNDb25maWcNCg0KLyoNCiAgRGVzY3JpcHRpb246IFRoZSBwcm9wb3J0aW9uIG9mIHdvbWVuIGluIHRoZSBhZHVsdCBwb3B1bGF0aW9uDQogICAgKDE4IHllYXJzIG9yIG9sZGVyKSB3aXRoIGEgQk1JIGxlc3MgdGhhbiAxOC41cw0KKi8NCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIHVuZGVybm91cmlzaG1lbnQiOg0KICAyMSAnJScNCg0KLyoNCiAgRGVzY3JpcHRpb246IFRoZSBwcm9wb3J0aW9uIG9mIHByZWduYW50IHdvbWVuIGluIHRoZSBwb3B1bGF0aW9uDQogICAgd2l0aCBhbmFlbWlhIChoYWVtb2dsb2JpbiBsZXZlbCBsZXNzIHRoYW4gMTEgZy9kbCkNCiovDQpkZWZpbmUgIlBvcHVsYXRpb24gcHJldmFsZW5jZSBvZiBhbmFlbWlhIjoNCiAgNDEgJyUnDQoNCi8qDQogIERlc2NyaXB0aW9uOiBXb21lbiBpbiB0aGUgcG9wdWxhdGlvbiBhcmUgbGlrZWx5IHRvIGhhdmUgbG93IGRpZXRhcnkNCiAgICBjYWxjaXVtIGludGFrZSAobGVzcyB0aGFuIDkwMCBtZyBvZiBjYWxjaXVtIHBlciBkYXkpDQoqLw0KZGVmaW5lICJQb3B1bGF0aW9uIHdpdGggbG93IGRpZXRhcnkgY2FsY2l1bSBpbnRha2UiOg0KICB0cnVlDQoNCi8qDQpEZXNjcmlwdGlvbjogVGhlIHR1YmVyY3Vsb3NpcyBwcmV2YWxlbmNlIGluIHRoZSBnZW5lcmFsIHBvcHVsYXRpb24NCiAgaW4gbnVtYmVyIG9mIGNhc2VzIHBlciAxMDAgMDAwIHBlcnNvbnMgb3IgZ3JlYXRlcg0KKi8NCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIHR1YmVyY3Vsb3NpcyAoVEIpIjoNCiAgMTAyDQoNCi8qDQogIERlc2NyaXB0aW9uOiBWaXRhbWluIEEgZGVmaWNpZW5jeSBpcyBhIHNldmVyZSBwdWJsaWMgaGVhbHRoIHByb2JsZW0NCiAgICBpZiA1JSBvciBtb3JlIG9mIHdvbWVuIGluIGEgcG9wdWxhdGlvbiBoYXZlIGEgaGlzdG9yeSBvZiBuaWdodA0KICAgIGJsaW5kbmVzcyBpbiB0aGVpciBtb3N0IHJlY2VudCBwcmVnbmFuY3kgaW4gdGhlIHByZXZpb3VzIDPigJM1IHllYXJzDQogICAgdGhhdCBlbmRlZCBpbiBhIGxpdmUgYmlydGgsIG9yIGlmIDIwJSBvciBtb3JlIG9mIHByZWduYW50IHdvbWVuDQogICAgaGF2ZSBhIHNlcnVtIHJldGlub2wgbGV2ZWwgYmVsb3cgMC43MCDCtW1vbC9MDQoqLw0KZGVmaW5lICJQb3B1bGF0aW9uIHdpdGggdml0YW1pbiBBIGRlZmljaWVuY3kiOg0KICB0cnVlDQoNCi8qDQogIERlc2NyaXB0aW9uOiBUaGUgcGVyY2VudGFnZSBvZiBpbmRpdmlkdWFscyBpbiB0aGUgZ2VuZXJhbCBwb3B1bGF0aW9uDQogICAgaW5mZWN0ZWQgd2l0aCBhdCBsZWFzdCBvbmUgc3BlY2llcyBvZiBzb2lsLXRyYW5zbWl0dGVkIGhlbG1pbnRoDQoqLw0KZGVmaW5lICJQb3B1bGF0aW9uIHByZXZhbGVuY2Ugb2Ygc29pbC10cmFuc21pdHRlZCBoZWxtaW50aCBpbmZlY3Rpb24iOg0KICAyMSAnJScNCg0KLyoNCiAgRGVzY3JpcHRpb246IEhJViBpbmNpZGVuY2UgbnVtYmVyIG9mIGNhc2VzIHBlciAxMDAgcGVyc29uLXllYXJzDQoqLw0KZGVmaW5lICJQb3B1bGF0aW9uIGluY2lkZW5jZSBvZiBISVYgaW4gdGhlIGFic2VuY2Ugb2YgUHJFUCI6DQogIFN5c3RlbS5RdWFudGl0eSB7IHZhbHVlOiA0LCB1bml0OiAne1BlcnNvbi15ZWFyc30nIH0NCg0KLyoNCiAgRGVzY3JpcHRpb246IEhJVsKgcHJldmFsZW5jZSBpcyBjb25zaXN0ZW50bHkgb3ZlciA1JSBpbiBhdCBsZWFzdCBvbmUNCiAgICBkZWZpbmVkIGtleSBwb3B1bGF0aW9uIGJ1dCBpcyBiZWxvdyAxJSBpbiBwcmVnbmFudCB3b21lbiBhdHRlbmRpbmcNCiAgICBhbnRlbmF0YWwgY2xpbmljcw0KKi8NCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIEhJViBpbiBrZXkgcG9wdWxhdGlvbnMgKG1lbiB3aG8gaGF2ZSBzZXggd2l0aCBtZW4sIHBlb3BsZSBpbiBwcmlzb24gb3Igb3RoZXIgY2xvc2VkIHNldHRpbmdzLCBwZW9wbGUgd2hvIGluamVjdCBkcnVncywgc2V4IHdvcmtlcnMgYW5kIHRyYW5zZ2VuZGVyIHBlb3BsZSkgIjoNCiAgdHJ1ZQ0KDQovKg0KICBEZXNjcmlwdGlvbjogVGhlIHByb3BvcnRpb24gb2YgcHJlZ25hbnQgd29tZW4gaW4gdGhlIHBvcHVsYXRpb24gd2hvIGFyZQ0KICAgIEhJViBwb3NpdGl2ZQ0KKi8NCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIEhJViBpbiBwcmVnbmFudCB3b21lbiI6DQogIDYgJyUnDQoNCi8qDQogIERlc2NyaXB0aW9uOiBXaGV0aGVyIHRoZSBzZXR0aW5nIGlzIGEgbWFsYXJpYS1lbmRlbWljIHNldHRpbmcNCiovDQpkZWZpbmUgIk1hbGFyaWEtZW5kZW1pYyBzZXR0aW5nIjoNCiAgdHJ1ZQ0KDQovKg0KICBEZXNjcmlwdGlvbjogVGhlIHByb3BvcnRpb24gb2YgcHJlZ25hbnQgd29tZW4gaW4gdGhlIHBvcHVsYXRpb24gd2l0aCBzeXBoaWxpcw0KKi8NCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIHN5cGhpbGlzIGluIHByZWduYW50IHdvbWVuIjoNCiAgNiAnJScNCg0KLyoNCiAgRGVzY3JpcHRpb246IFRoZSBwcm9wb3J0aW9uIG9mIGhlcGF0aXRpcyBCIHNlcm9wcmV2YWxlbmNlIGluIHRoZQ0KICAgIGdlbmVyYWwgcG9wdWxhdGlvbg0KKi8NCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIGhlcGF0aXRpcyBCIjoNCiAgMyAnJScNCg0KLyoNCiAgRGVzY3JpcHRpb246IFRoZSBwcm9wb3J0aW9uIG9mIGhlcGF0aXRpcyBDIHZpcnVzIChIQ1YpIGFudGlib2R5DQogICAgc2Vyb3ByZXZhbGFuY2UgaW4gdGhlIGdlbmVyYWwgcG9wdWxhdGlvbg0KKi8NCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIGhlcGF0aXRpcyBDIjoNCiAgMyAnJScNCg0KLyoNCiAgRGVzY3JpcHRpb246ICJXSE8gZG9lcyBub3QgcmVjb21tZW5kIHVuaXZlcnNhbCBzY3JlZW5pbmcgZm9yIHZpb2xlbmNlIG9mDQogICAgd29tZW4gYXR0ZW5kaW5nIGhlYWx0aCBjYXJlLiBXSE8gZG9lcyBlbmNvdXJhZ2UgaGVhbHRoLWNhcmUgcHJvdmlkZXJzDQogICAgdG8gcmFpc2UgdGhlIHRvcGljIHdpdGggd29tZW4gd2hvIGhhdmUgaW5qdXJpZXMgb3IgY29uZGl0aW9ucyB0aGF0IHRoZXkNCiAgICBzdXNwZWN0IG1heSBiZSByZWxhdGVkIHRvIHZpb2xlbmNlLiBBbGwgb2YgdGhlIGZvbGxvd2luZyBtdXN0IGJlIGluDQogICAgcGxhY2UgYXQgdGhlIGhlYWx0aCBmYWNpbGl0eSBmb3IgdGhpcyB0byBiZSBUUlVFOg0KICAgICAgYS4gQSBwcm90b2NvbCBvciBzdGFuZGFyZCBvcGVyYXRpbmcgcHJvY2VkdXJlIGZvciBpbnRpbWF0ZSBwYXJ0bmVyDQogICAgICAgIHZpb2xlbmNlIChJUFYpDQogICAgICBiLiBBIGhlYWx0aCB3b3JrZXIgdHJhaW5lZCBvbiBob3cgdG8gYXNrIGFib3V0IElQViBhbmQgaG93IHRvIHByb3ZpZGUNCiAgICAgICAgdGhlIG1pbmltdW0gcmVzcG9uc2Ugb3IgYmV5b25kDQogICAgICBjLiBBIHByaXZhdGUgc2V0dGluZw0KICAgICAgZC4gQSB3YXkgdG8gZW5zdXJlIGNvbmZpZGVudGlhbGl0eQ0KICAgICAgZS4gVGltZSB0byBhbGxvdyBmb3IgYXBwcm9wcmlhdGUgZGlzY2xvc3VyZSBBTkQNCiAgICAgIGYuIEEgc3lzdGVtIGZvciByZWZlcnJhbCBpbiBwbGFjZS4iDQoqLw0KZGVmaW5lICJNaW5pbXVtIHJlcXVpcmVtZW50cyBmb3IgSVBWIGFzc2Vzc21lbnQiOg0KICB0cnVlDQoNCi8qDQogIERlc2NyaXB0aW9uOiBJcyBhbiB1bHRyYXNvdW5kIG1hY2hpbmUgYXZhaWxhYmxlIGFuZCBmdW5jdGlvbmFsIGF0IHlvdXINCiAgICBmYWNpbGl0eSBhbmQgYSB0cmFpbmVkIGhlYWx0aCB3b3JrZXIgYXZhaWxhYmxlIHRvIHVzZSBpdD8NCiovDQpkZWZpbmUgIlVsdHJhc291bmQgYXZhaWxhYmxlIGF0IHRoZSBoZWFsdGgtY2FyZSBmYWNpbGl0eSI6DQogIHRydWUNCg0KLyoNCiAgRGVzY3JpcHRpb246IFRoZSBwcm9wb3J0aW9uIG9mIHByZWduYW50IHdvbWVuIGluIHRoZSBoZWFsdGgtY2FyZSBmYWNpbGl0eSdzDQogICAgY2F0Y2htZW50IGFyZWEgd2hvIGFyZSBISVYgcG9zaXRpdmUsIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgcHJlZ25hbnQNCiAgICB3b21lbiBhdHRlbmRpbmcgYW50ZW5hdGFsIGNsaW5pY3MgYXQgdGhlIGhlYWx0aC1jYXJlIGZhY2lsaXR5DQoqLw0KZGVmaW5lICJQcmV2YWxlbmNlIG9mIEhJViBpbiBwcmVnbmFudCB3b21lbiBpbiB0aGUgY2F0Y2htZW50IGFyZWEiOg0KICAyICclJw0K"
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  } ]
}