{
  "resourceType": "Library",
  "id": "ANCConfig",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/who/anc-cds/Library/ANCConfig",
  "name": "ANCConfig",
  "parameter": [ {
    "name": "Population prevalence of undernourishment",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population prevalence of anaemia",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population with low dietary calcium intake",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Population prevalence of tuberculosis (TB)",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "integer"
  }, {
    "name": "Population with vitamin A deficiency",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Population prevalence of soil-transmitted helminth infection",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population incidence of HIV in the absence of PrEP",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population prevalence of HIV in key populations (men who have sex with men, people in prison or other closed settings, people who inject drugs, sex workers and transgender people) ",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Population prevalence of HIV in pregnant women",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Malaria-endemic setting",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Population prevalence of syphilis in pregnant women",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population prevalence of hepatitis B",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Population prevalence of hepatitis C",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  }, {
    "name": "Minimum requirements for IPV assessment",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Ultrasound available at the health-care facility",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Prevalence of HIV in pregnant women in the catchment area",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Quantity"
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBBTkNDb25maWcKCi8qCiAgRGVzY3JpcHRpb246IFRoZSBwcm9wb3J0aW9uIG9mIHdvbWVuIGluIHRoZSBhZHVsdCBwb3B1bGF0aW9uCiAgICAoMTggeWVhcnMgb3Igb2xkZXIpIHdpdGggYSBCTUkgbGVzcyB0aGFuIDE4LjVzCiovCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIHVuZGVybm91cmlzaG1lbnQiOgogIDIxICclJwoKLyoKICBEZXNjcmlwdGlvbjogVGhlIHByb3BvcnRpb24gb2YgcHJlZ25hbnQgd29tZW4gaW4gdGhlIHBvcHVsYXRpb24KICAgIHdpdGggYW5hZW1pYSAoaGFlbW9nbG9iaW4gbGV2ZWwgbGVzcyB0aGFuIDExIGcvZGwpCiovCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIGFuYWVtaWEiOgogIDQxICclJwoKLyoKICBEZXNjcmlwdGlvbjogV29tZW4gaW4gdGhlIHBvcHVsYXRpb24gYXJlIGxpa2VseSB0byBoYXZlIGxvdyBkaWV0YXJ5CiAgICBjYWxjaXVtIGludGFrZSAobGVzcyB0aGFuIDkwMCBtZyBvZiBjYWxjaXVtIHBlciBkYXkpCiovCmRlZmluZSAiUG9wdWxhdGlvbiB3aXRoIGxvdyBkaWV0YXJ5IGNhbGNpdW0gaW50YWtlIjoKICB0cnVlCgovKgpEZXNjcmlwdGlvbjogVGhlIHR1YmVyY3Vsb3NpcyBwcmV2YWxlbmNlIGluIHRoZSBnZW5lcmFsIHBvcHVsYXRpb24KICBpbiBudW1iZXIgb2YgY2FzZXMgcGVyIDEwMCAwMDAgcGVyc29ucyBvciBncmVhdGVyCiovCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIHR1YmVyY3Vsb3NpcyAoVEIpIjoKICAxMDIKCi8qCiAgRGVzY3JpcHRpb246IFZpdGFtaW4gQSBkZWZpY2llbmN5IGlzIGEgc2V2ZXJlIHB1YmxpYyBoZWFsdGggcHJvYmxlbQogICAgaWYgNSUgb3IgbW9yZSBvZiB3b21lbiBpbiBhIHBvcHVsYXRpb24gaGF2ZSBhIGhpc3Rvcnkgb2YgbmlnaHQKICAgIGJsaW5kbmVzcyBpbiB0aGVpciBtb3N0IHJlY2VudCBwcmVnbmFuY3kgaW4gdGhlIHByZXZpb3VzIDPigJM1IHllYXJzCiAgICB0aGF0IGVuZGVkIGluIGEgbGl2ZSBiaXJ0aCwgb3IgaWYgMjAlIG9yIG1vcmUgb2YgcHJlZ25hbnQgd29tZW4KICAgIGhhdmUgYSBzZXJ1bSByZXRpbm9sIGxldmVsIGJlbG93IDAuNzAgwrVtb2wvTAoqLwpkZWZpbmUgIlBvcHVsYXRpb24gd2l0aCB2aXRhbWluIEEgZGVmaWNpZW5jeSI6CiAgdHJ1ZQoKLyoKICBEZXNjcmlwdGlvbjogVGhlIHBlcmNlbnRhZ2Ugb2YgaW5kaXZpZHVhbHMgaW4gdGhlIGdlbmVyYWwgcG9wdWxhdGlvbgogICAgaW5mZWN0ZWQgd2l0aCBhdCBsZWFzdCBvbmUgc3BlY2llcyBvZiBzb2lsLXRyYW5zbWl0dGVkIGhlbG1pbnRoCiovCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIHNvaWwtdHJhbnNtaXR0ZWQgaGVsbWludGggaW5mZWN0aW9uIjoKICAyMSAnJScKCi8qCiAgRGVzY3JpcHRpb246IEhJViBpbmNpZGVuY2UgbnVtYmVyIG9mIGNhc2VzIHBlciAxMDAgcGVyc29uLXllYXJzCiovCmRlZmluZSAiUG9wdWxhdGlvbiBpbmNpZGVuY2Ugb2YgSElWIGluIHRoZSBhYnNlbmNlIG9mIFByRVAiOgogIFN5c3RlbS5RdWFudGl0eSB7IHZhbHVlOiA0LCB1bml0OiAne1BlcnNvbi15ZWFyc30nIH0KCi8qCiAgRGVzY3JpcHRpb246IEhJVsKgcHJldmFsZW5jZSBpcyBjb25zaXN0ZW50bHkgb3ZlciA1JSBpbiBhdCBsZWFzdCBvbmUKICAgIGRlZmluZWQga2V5IHBvcHVsYXRpb24gYnV0IGlzIGJlbG93IDElIGluIHByZWduYW50IHdvbWVuIGF0dGVuZGluZwogICAgYW50ZW5hdGFsIGNsaW5pY3MKKi8KZGVmaW5lICJQb3B1bGF0aW9uIHByZXZhbGVuY2Ugb2YgSElWIGluIGtleSBwb3B1bGF0aW9ucyAobWVuIHdobyBoYXZlIHNleCB3aXRoIG1lbiwgcGVvcGxlIGluIHByaXNvbiBvciBvdGhlciBjbG9zZWQgc2V0dGluZ3MsIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzLCBzZXggd29ya2VycyBhbmQgdHJhbnNnZW5kZXIgcGVvcGxlKSAiOgogIHRydWUKCi8qCiAgRGVzY3JpcHRpb246IFRoZSBwcm9wb3J0aW9uIG9mIHByZWduYW50IHdvbWVuIGluIHRoZSBwb3B1bGF0aW9uIHdobyBhcmUKICAgIEhJViBwb3NpdGl2ZQoqLwpkZWZpbmUgIlBvcHVsYXRpb24gcHJldmFsZW5jZSBvZiBISVYgaW4gcHJlZ25hbnQgd29tZW4iOgogIDYgJyUnCgovKgogIERlc2NyaXB0aW9uOiBXaGV0aGVyIHRoZSBzZXR0aW5nIGlzIGEgbWFsYXJpYS1lbmRlbWljIHNldHRpbmcKKi8KZGVmaW5lICJNYWxhcmlhLWVuZGVtaWMgc2V0dGluZyI6CiAgdHJ1ZQoKLyoKICBEZXNjcmlwdGlvbjogVGhlIHByb3BvcnRpb24gb2YgcHJlZ25hbnQgd29tZW4gaW4gdGhlIHBvcHVsYXRpb24gd2l0aCBzeXBoaWxpcwoqLwpkZWZpbmUgIlBvcHVsYXRpb24gcHJldmFsZW5jZSBvZiBzeXBoaWxpcyBpbiBwcmVnbmFudCB3b21lbiI6CiAgNiAnJScKCi8qCiAgRGVzY3JpcHRpb246IFRoZSBwcm9wb3J0aW9uIG9mIGhlcGF0aXRpcyBCIHNlcm9wcmV2YWxlbmNlIGluIHRoZQogICAgZ2VuZXJhbCBwb3B1bGF0aW9uCiovCmRlZmluZSAiUG9wdWxhdGlvbiBwcmV2YWxlbmNlIG9mIGhlcGF0aXRpcyBCIjoKICAzICclJwoKLyoKICBEZXNjcmlwdGlvbjogVGhlIHByb3BvcnRpb24gb2YgaGVwYXRpdGlzIEMgdmlydXMgKEhDVikgYW50aWJvZHkKICAgIHNlcm9wcmV2YWxhbmNlIGluIHRoZSBnZW5lcmFsIHBvcHVsYXRpb24KKi8KZGVmaW5lICJQb3B1bGF0aW9uIHByZXZhbGVuY2Ugb2YgaGVwYXRpdGlzIEMiOgogIDMgJyUnCgovKgogIERlc2NyaXB0aW9uOiAiV0hPIGRvZXMgbm90IHJlY29tbWVuZCB1bml2ZXJzYWwgc2NyZWVuaW5nIGZvciB2aW9sZW5jZSBvZgogICAgd29tZW4gYXR0ZW5kaW5nIGhlYWx0aCBjYXJlLiBXSE8gZG9lcyBlbmNvdXJhZ2UgaGVhbHRoLWNhcmUgcHJvdmlkZXJzCiAgICB0byByYWlzZSB0aGUgdG9waWMgd2l0aCB3b21lbiB3aG8gaGF2ZSBpbmp1cmllcyBvciBjb25kaXRpb25zIHRoYXQgdGhleQogICAgc3VzcGVjdCBtYXkgYmUgcmVsYXRlZCB0byB2aW9sZW5jZS4gQWxsIG9mIHRoZSBmb2xsb3dpbmcgbXVzdCBiZSBpbgogICAgcGxhY2UgYXQgdGhlIGhlYWx0aCBmYWNpbGl0eSBmb3IgdGhpcyB0byBiZSBUUlVFOgogICAgICBhLiBBIHByb3RvY29sIG9yIHN0YW5kYXJkIG9wZXJhdGluZyBwcm9jZWR1cmUgZm9yIGludGltYXRlIHBhcnRuZXIKICAgICAgICB2aW9sZW5jZSAoSVBWKQogICAgICBiLiBBIGhlYWx0aCB3b3JrZXIgdHJhaW5lZCBvbiBob3cgdG8gYXNrIGFib3V0IElQViBhbmQgaG93IHRvIHByb3ZpZGUKICAgICAgICB0aGUgbWluaW11bSByZXNwb25zZSBvciBiZXlvbmQKICAgICAgYy4gQSBwcml2YXRlIHNldHRpbmcKICAgICAgZC4gQSB3YXkgdG8gZW5zdXJlIGNvbmZpZGVudGlhbGl0eQogICAgICBlLiBUaW1lIHRvIGFsbG93IGZvciBhcHByb3ByaWF0ZSBkaXNjbG9zdXJlIEFORAogICAgICBmLiBBIHN5c3RlbSBmb3IgcmVmZXJyYWwgaW4gcGxhY2UuIgoqLwpkZWZpbmUgIk1pbmltdW0gcmVxdWlyZW1lbnRzIGZvciBJUFYgYXNzZXNzbWVudCI6CiAgdHJ1ZQoKLyoKICBEZXNjcmlwdGlvbjogSXMgYW4gdWx0cmFzb3VuZCBtYWNoaW5lIGF2YWlsYWJsZSBhbmQgZnVuY3Rpb25hbCBhdCB5b3VyCiAgICBmYWNpbGl0eSBhbmQgYSB0cmFpbmVkIGhlYWx0aCB3b3JrZXIgYXZhaWxhYmxlIHRvIHVzZSBpdD8KKi8KZGVmaW5lICJVbHRyYXNvdW5kIGF2YWlsYWJsZSBhdCB0aGUgaGVhbHRoLWNhcmUgZmFjaWxpdHkiOgogIHRydWUKCi8qCiAgRGVzY3JpcHRpb246IFRoZSBwcm9wb3J0aW9uIG9mIHByZWduYW50IHdvbWVuIGluIHRoZSBoZWFsdGgtY2FyZSBmYWNpbGl0eSdzCiAgICBjYXRjaG1lbnQgYXJlYSB3aG8gYXJlIEhJViBwb3NpdGl2ZSwgYmFzZWQgb24gdGhlIG51bWJlciBvZiBwcmVnbmFudAogICAgd29tZW4gYXR0ZW5kaW5nIGFudGVuYXRhbCBjbGluaWNzIGF0IHRoZSBoZWFsdGgtY2FyZSBmYWNpbGl0eQoqLwpkZWZpbmUgIlByZXZhbGVuY2Ugb2YgSElWIGluIHByZWduYW50IHdvbWVuIGluIHRoZSBjYXRjaG1lbnQgYXJlYSI6CiAgMiAnJScK"
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  } ]
}